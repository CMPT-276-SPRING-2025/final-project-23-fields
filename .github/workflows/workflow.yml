name: Test and Deploy

on:
  push:
    branches: [testing]
  pull_request:
    branches: [testing]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libgbm1
          npm ci

      - name: Build
        run: npm run build

      - name: Deploy to DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create deployment and wait
        run: |
          echo "Creating deployment..."
          doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait

          # Wait for app to be running
          echo "Waiting for app to be running..."
          for i in {1..12}; do
            APP_STATUS=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format Status --no-header | tr -d '[:space:]')
            echo "Current status: $APP_STATUS"
            
            if [ "$APP_STATUS" = "running" ]; then
              echo "App is running!"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "Timeout waiting for app to run"
              exit 1
            fi
            
            echo "Waiting... ($i/12)"
            sleep 10
          done

      - name: Wait for deployment and verify
        id: get-url
        run: |
          # Get app URL with verification
          for i in {1..5}; do
            STAGING_URL=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format AppURL --no-header | tr -d '[:space:]')
            
            if [ ! -z "$STAGING_URL" ]; then
              echo "Got URL: $STAGING_URL"
              echo "STAGING_URL=$STAGING_URL" >> $GITHUB_ENV
              echo "url=$STAGING_URL" >> $GITHUB_OUTPUT
              break
            fi
            
            echo "Retrying URL fetch... ($i/5)"
            sleep 5
          done

          if [ -z "$STAGING_URL" ]; then
            echo "Error: Could not get app URL"
            exit 1
          fi

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      - name: Install ChromeDriver
        run: |
          version=$(google-chrome --version | cut -d ' ' -f 3)
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$version/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver-linux64*

      - name: Run Selenium tests
        env:
          STAGING_URL: ${{ env.staging_url }}
          NODE_ENV: staging
        run: |
          # Debug URL before testing
          echo "STAGING_URL before test: ${STAGING_URL}"

          if [ -z "${STAGING_URL}" ] || [ "${STAGING_URL}" = "https://" ]; then
            echo "Error: Invalid STAGING_URL"
            exit 1
          fi

          # Start Xvfb
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & 
          export DISPLAY=:99

          # Start ChromeDriver
          chromedriver --port=4444 &
          sleep 5

          # Run tests with URL debug output
          echo "Running tests against: ${STAGING_URL}"
          STAGING_URL="${STAGING_URL}" npm run test
