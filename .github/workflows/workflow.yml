name: Test and Deploy

on:
  push:
    branches: [testing]
  pull_request:
    branches: [testing]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb libgbm1
          npm ci

      - name: Build
        run: npm run build

      - name: Deploy to DigitalOcean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Create deployment and wait
        id: deployment
        run: |
          echo "Creating deployment..."
          DEPLOYMENT_ID=$(doctl apps create-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} --wait --format ID --no-header)
          echo "Deployment ID: $DEPLOYMENT_ID"

          # Wait for app to be active
          echo "Waiting for deployment to be active..."
          for i in {1..12}; do
            DEPLOY_STATUS=$(doctl apps get-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} $DEPLOYMENT_ID --format Phase --no-header | tr -d '[:space:]')
            echo "Current deployment status: $DEPLOY_STATUS"
            
            if [ "$DEPLOY_STATUS" = "ACTIVE" ]; then
              echo "Deployment is active!"
              
              # Get the app URL using both formats to ensure we get a URL
              APP_URL=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format AppURL --no-header | tr -d '[:space:]')
              if [ -z "$APP_URL" ]; then
                APP_URL=$(doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format DefaultIngress --no-header | tr -d '[:space:]')
              fi
              
              if [ -z "$APP_URL" ]; then
                echo "Error: Could not get app URL"
                exit 1
              fi

              # Set the URL with https:// prefix if not present
              if [[ $APP_URL != https://* ]]; then
                APP_URL="https://$APP_URL"
              fi

              # Export URL for subsequent steps
              echo "staging_url=$APP_URL" >> $GITHUB_OUTPUT
              echo "STAGING_URL=$APP_URL" >> $GITHUB_ENV
              echo "Got URL: $APP_URL"
              break
            fi
            
            if [ $i -eq 12 ]; then
              echo "Timeout waiting for deployment"
              doctl apps get-deployment ${{ secrets.DIGITALOCEAN_APP_ID }} $DEPLOYMENT_ID --format Phase,Progress,Error
              exit 1
            fi
            
            echo "Waiting... ($i/12)"
            sleep 10
          done

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          google-chrome --version

      - name: Install ChromeDriver
        run: |
          version=$(google-chrome --version | cut -d ' ' -f 3)
          wget https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/$version/linux64/chromedriver-linux64.zip
          unzip chromedriver-linux64.zip
          sudo mv chromedriver-linux64/chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          rm -rf chromedriver-linux64*

      - name: Run Selenium tests
        env:
          STAGING_URL: ${{ steps.deployment.outputs.staging_url }}
          NODE_ENV: staging
        run: |
          # Debug URL before testing
          echo "STAGING_URL before test: $STAGING_URL"

          if [ -z "$STAGING_URL" ] || [ "$STAGING_URL" = "https://" ]; then
            echo "Error: Invalid STAGING_URL"
            doctl apps get ${{ secrets.DIGITALOCEAN_APP_ID }} --format AppURL,DefaultIngress --no-header
            exit 1
          fi

          # Start Xvfb
          Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 & 
          export DISPLAY=:99

          # Start ChromeDriver
          chromedriver --port=4444 &
          sleep 5

          # Run tests with URL debug output
          echo "Running tests against: $STAGING_URL"
          STAGING_URL="$STAGING_URL" npm run test
